Модуль 1. Поиск. 
В качестве основы контрольного задания взято задание предлагающееся на курсе в Berkeley (https://inst.eecs.berkeley.edu/~cs188/fa18/project1.html)

В этом проекте ваш агент Pacman должен найти все пути через лабиринт, чтобы добраться до определенного места и эффективно собрать еду. Ваша Задача создадить общие алгоритмы поиска и примените их к  Pacman.

Код данного проекта состоит из нескольких файлов Python. Часть из них необходимо прочитать и понять, для выполнения задания и часть Вы можете смело проигнорировать. Весь код находится в приложенном zip архиве


Файлы, которые Вы будете должны отредактировать
search.py   Файл, где находятся все алгоритмы поиска
searchAgents.py Где находятся агенты основанные на поиске

Файлы, на которые стоит посмотреть
pacman.py Основной файл запускающий игру Pacman. Данный файл описыват Состояние среды  Pacman, которые вы будете использовать в проекте  
game.py Логика, как работает мир Pacman. Данный файл описывает несколько вспомогательных типов, таких как AgentState, Agent, Direction, и Grid.
util.py Полезные структуры данных для имплементации алгоритма поиска

Вспомогательные файлы, которые можно проигнорироввть
graphicsDisplay.py  Графика Pacman
graphicsUtils.py    Вспомогательный файл для графики Pacman graphics
textDisplay.py  ASCII графика Pacman
ghostAgents.py  Агенты для управления призраками
keyboardAgents.py   Интерфейс клавиатуры для управления Pacman
layout.py   Код для чтения файлов и сохранения их содержимого
autograder.py   Project autograder
testParser.py   Parses autograder test and solution files
testClasses.py  General autograding test classes
test_cases/ Directory containing the test cases for each question
searchTestClasses.py    Project 1 specific autograding test classes

Файлы, которые нужно будет прислать
search.py
searchAgents.py


Инструкция
После скачивания архива с кодом и смены директории у Вас будет возможность поиграть в Pacman, запуская соответствующие команды в командную строку

python pacman.py


Самый простой Агент в searchAgents.py называется GoWestAgent, который всегда идет на запад. 

python pacman.py --layout testMaze --pacman GoWestAgent
python pacman.py --layout tinyMaze --pacman GoWestAgent

Eсли Pacman застрял, вы можете выйти нажав CTRL-c в вашем терминале. Ваша задача научить агента решить не только задачу tinyMaze а все

Обратите внимание, что скрипт pacman.py  поддерживает ряд опций, которые могут быть записаны в полном (например, --layout) и сокращенном виде (например, -l). Полный список всех опций можно увидеть выполнив команду.

python pacman.py -h

Задача 1 (10 баллов): Поиск конечной точки с едой, используя Алгоритм поиска в грубину (DFS)

В файле searchAgents.py, Вы найдете полностью реализованного агента поиска, который планирует путь на игоровом поле и затем выполняет его шаг за шагом. Алгоримты поиска для формулировки плана не реализованы - это Ваша задача.

Во-первых, проверьте, что агент поиска работает корректно, запустив

python pacman.py -l tinyMaze -p SearchAgent -a fn=tinyMazeSearch

Данная комманда говорит агенту поиска использовать алгоритм поиска tinyMazeSearch, который реализован а search.py. Pacman должен пройти лабиринт успешно 

Теперь настало время, для написания алгоритмов поиска, чтобы помочь Pacman построить маршрут. 

ВАЖНОЕ ЗАМЕЧАНИЕ: Все ваши функции поиска должны возвращать набор действий, которые приведет агента от стартовой точки к целевой

ВАЖНОЕ ЗАМЕЧАНИЕ: Обязательно используйте структуры данных Stack, Queue and PriorityQueue приведенные в util.py.

Реализуйте Алгоритм поиска вглубину в функции depthFirstSearch в search.py. Чтобы Ваш алгоритм работал, напишите версию агоритм DFS, который исключает уже посещенные состояния

Ваш код должен найти решение для

python pacman.py -l tinyMaze -p SearchAgent
python pacman.py -l mediumMaze -p SearchAgent
python pacman.py -l bigMaze -z .5 -p SearchAgent

Поле Pacman покажет распределение исследованных состояний, и порядок в котором он исследовался(Чем ярче красынй тем раньше исследовался). Это тот алгоритм, который вы ожидали? Идет ли он по всем исследованным клеткам по пути к цели?


Задача 2 (10 баллов): Поиск в Ширину (BFS)
Реализуйте алгоритм поиска в ширину в функции breadthFirstSearch в search.py Напишите алгоритм поиска нп графе, который исключает посещение уже посещенных состояний. Проверьте код также как и для DFS 

python pacman.py -l mediumMaze -p SearchAgent -a fn=bfs
python pacman.py -l bigMaze -p SearchAgent -a fn=bfs -z .5

Задача 3 (10 баллов): Uninformed cost search
Алгоритм поиска в глубину ищет алгоритм с наименьшими действиями, однако иногда требуется найти алгоритм, который лучший по другим соображениям

Реализуйте алгоритм uniform-cost graph search в функции uniformCostSearch в search.py Напишите алгоритм поиска нп графе, который исключает посещение уже посещенных состояний. Он должен упешно отработать для всех трех сценариев

python pacman.py -l mediumMaze -p SearchAgent -a fn=ucs
python pacman.py -l mediumDottedMaze -p StayEastSearchAgent
python pacman.py -l mediumScaryMaze -p StayWestSearchAgent


Задача 4 (10 баллов):алгоритм A* 

Реализуйте алгоритм A* для функции aStarSearch в search.py. На вход A* получает функцию евристики. Евристика на вход получает два аргумента: текущее состояние и задачу. Функция nullHeuristic тривиальный случай

Проверье Вашу реализацию алгоритма A*  для решения задачи поиска пути используя евристику Манхеттоновское расстояние (Уже реализовано в searchAgents.py) 

python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic
